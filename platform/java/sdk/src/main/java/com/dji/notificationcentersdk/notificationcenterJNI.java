/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.dji.notificationcentersdk;

public class notificationcenterJNI {
  public final static native void AircraftLocation_x_set(long jarg1, AircraftLocation jarg1_, int jarg2);
  public final static native int AircraftLocation_x_get(long jarg1, AircraftLocation jarg1_);
  public final static native void AircraftLocation_y_set(long jarg1, AircraftLocation jarg1_, int jarg2);
  public final static native int AircraftLocation_y_get(long jarg1, AircraftLocation jarg1_);
  public final static native void AircraftLocation_z_set(long jarg1, AircraftLocation jarg1_, int jarg2);
  public final static native int AircraftLocation_z_get(long jarg1, AircraftLocation jarg1_);
  public final static native long new_AircraftLocation__SWIG_0();
  public final static native long new_AircraftLocation__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native void delete_AircraftLocation(long jarg1);
  public final static native void delete_AircraftLocationCallback(long jarg1);
  public final static native void AircraftLocationCallback_onMessage(long jarg1, AircraftLocationCallback jarg1_, long jarg2, AircraftLocation jarg2_);
  public final static native long new_AircraftLocationCallback();
  public final static native void AircraftLocationCallback_director_connect(AircraftLocationCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AircraftLocationCallback_change_ownership(AircraftLocationCallback obj, long cptr, boolean take_or_release);
  public final static native void delete_ResultCallback(long jarg1);
  public final static native void ResultCallback_onResult(long jarg1, ResultCallback jarg1_, int jarg2);
  public final static native long new_ResultCallback();
  public final static native void ResultCallback_director_connect(ResultCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ResultCallback_change_ownership(ResultCallback obj, long cptr, boolean take_or_release);
  public final static native void SdkInitializeInfo_log_path_set(long jarg1, SdkInitializeInfo jarg1_, String jarg2);
  public final static native String SdkInitializeInfo_log_path_get(long jarg1, SdkInitializeInfo jarg1_);
  public final static native void SdkInitializeInfo_log_level_set(long jarg1, SdkInitializeInfo jarg1_, int jarg2);
  public final static native int SdkInitializeInfo_log_level_get(long jarg1, SdkInitializeInfo jarg1_);
  public final static native long new_SdkInitializeInfo__SWIG_0(String jarg1, int jarg2);
  public final static native long new_SdkInitializeInfo__SWIG_1(String jarg1);
  public final static native long new_SdkInitializeInfo__SWIG_2();
  public final static native void delete_SdkInitializeInfo(long jarg1);
  public final static native long new_SDKManager();
  public final static native void delete_SDKManager(long jarg1);
  public final static native void SDKManager_init(long jarg1, SDKManager jarg1_, long jarg2, SdkInitializeInfo jarg2_);
  public final static native boolean SDKManager_isInit(long jarg1, SDKManager jarg1_);
  public final static native void SDKManager_setWebsocketEventListener(long jarg1, SDKManager jarg1_, long jarg2, ConnectionListener jarg2_);
  public final static native void SDKManager_connect(long jarg1, SDKManager jarg1_, String jarg2);
  public final static native long SDKManager_getBusinessManager(long jarg1, SDKManager jarg1_);
  public final static native long SDKManager_poll();
  public final static native long new_BusinessManager(long jarg1);
  public final static native void BusinessManager_Send(long jarg1, BusinessManager jarg1_, String jarg2);
  public final static native void BusinessManager_Observe(long jarg1, BusinessManager jarg1_, long jarg2);
  public final static native void BusinessManager_CancelObserve(long jarg1, BusinessManager jarg1_, long jarg2);
  public final static native long BusinessManager_ListenAircraftLocation(long jarg1, BusinessManager jarg1_, long jarg2, long jarg3, String jarg4, long jarg5);
  public final static native int BusinessManager_listenAircraftLocationJava(long jarg1, BusinessManager jarg1_, long jarg2, AircraftLocationCallback jarg2_, long jarg3, ResultCallback jarg3_, String jarg4, int jarg5);
  public final static native void BusinessManager_cancelObserveJava(long jarg1, BusinessManager jarg1_, int jarg2);
  public final static native void delete_BusinessManager(long jarg1);
  public final static native void delete_ConnectionListener(long jarg1);
  public final static native void ConnectionListener_OnMessage(long jarg1, ConnectionListener jarg1_, String jarg2);
  public final static native void ConnectionListener_OnOpen(long jarg1, ConnectionListener jarg1_);
  public final static native void ConnectionListener_OnClose(long jarg1, ConnectionListener jarg1_);
  public final static native void ConnectionListener_OnError(long jarg1, ConnectionListener jarg1_, String jarg2);
  public final static native long new_ConnectionListener();
  public final static native void ConnectionListener_director_connect(ConnectionListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ConnectionListener_change_ownership(ConnectionListener obj, long cptr, boolean take_or_release);

  public static void SwigDirector_AircraftLocationCallback_onMessage(AircraftLocationCallback jself, long msg) {
    jself.onMessage(new AircraftLocation(msg, false));
  }
  public static void SwigDirector_ResultCallback_onResult(ResultCallback jself, int result) {
    jself.onResult(result);
  }
  public static void SwigDirector_ConnectionListener_OnMessage(ConnectionListener jself, String message) {
    jself.OnMessage(message);
  }
  public static void SwigDirector_ConnectionListener_OnOpen(ConnectionListener jself) {
    jself.OnOpen();
  }
  public static void SwigDirector_ConnectionListener_OnClose(ConnectionListener jself) {
    jself.OnClose();
  }
  public static void SwigDirector_ConnectionListener_OnError(ConnectionListener jself, String error) {
    jself.OnError(error);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
